<!DOCTYPE html>
<html>
    <head>
        <title>その他</title>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="/css/style.css" />
        <script src="/js/vue/vue.js"></script>
    </head>

    <body>
        <header>
            <h1>その他</h1>
        </header>
        <article>
            <h2>サムネール管理テーブル (BINDATA)</h2>
            <ul>
                <li><a href="/extra/bindatalist" target="_blank">内容一覧表示</a></li>
                <li><a href="/extra/bindataForm" target="_blank">サムネール画像の追加と修正</a></li>
                <li><a href="/extra/bindataQuery" target="_blank">サムネール画像の逆引き</a></li>
            </ul>
            <br />
            <h2>管理テーブルのバックアップ</h2>
            <ul>
                <li><a href="/extra/newBackup" target="_blank">バックアップテーブルを作る</a></li>
                <li><a href="/extra/removeBackup" target="_blank">古いバックアップテーブルを削除する</a></li>
            </ul>
            <br />
            <h2>レコード識別マーク一覧</h2>
            <ul>
                <li><a href="/extra/marksTable" target="_blank">識別マーク一覧 (marks テーブル)</a></li>
            </ul>
            <br />
            <h2>管理テーブルのデータの削除</h2>
            <p class="comment">(注意) 削除後のデータは復活できません。</p>
            <form id="deleteRecordForm">
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div>
                        <label><input type="radio" v-model="deleteTable" value="Albums" /> Albums</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" value="Projects" /> Projects</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" value="Documents" /> Documents</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" value="Music" /> Music</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" value="BINDATA" /> BINDATA</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" value="Playlists" /> Playlists</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">削除する id</div>
                    <div class="form_item"><input type="number" v-model="deleteId" />&nbsp;<input type="button" value=" 削除する " v-on:click="deleteRecord_Click" /></div>
                </div>
                <br />
                <p class="message" v-text="deleteRecordMessage"></p>
            </form>
            <br />
            <h2>データ一括登録とチェック</h2>
            <form id="bulkDataForm">
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div>
                        <label><input type="radio" v-model="bulkTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="bulkTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="bulkTable" value="Music" /> Music</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">対象フォルダ</div>
                    <div class="form_item"><input type="text" v-model="folder" size="100" /></div>
                </div>
                <div class="form_row" style="margin-top:12px;">
                    <input type="button" v-on:click="checkButton_Click" value=" 一括チェック " />&nbsp;
                    <input type="button" v-on:click="insertButton_Click" value=" 一括登録 " />
                </div>
                <br />
                <p class="message" v-text="message"></p>
                <ul style="font-size:10pt;" v-html="result"></ul>
            </form>
            <br />
            <h2>パスの存在チェック</h2>
            <form id="checkPathForm" name="checkPathForm">
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div>
                        <label><input type="radio" v-model="checkTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="checkTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="checkTable" value="Music" /> Music</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">
                        チェックする id の範囲 (省略時はすべて)
                    </div>
                    <div class="form_item">
                        <input type="text" name="fromId" v-model="fromId" size="6" /> から <input type="text" name="toId" v-model="toId" size="6" /> まで
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">
                        <input type="button" v-on:click="checkTable_Click" value=" チェックする " />
                    </div>
                </div>
                <br />
                <p class="message" v-text="message"></p>
                <ul style="font-size:10pt;" v-html="result"></ul>
            </form>
            <br />
            <h2>タイマー</h2>
            <form id="timerForm">
                <input type="number" v-model="hours"> 時間&nbsp;&nbsp;
                <input type="number" v-model="munites"> 分
                <input type="number" v-model="seconds"> 秒<br />
                <input type="button" v-on:click="startButton_click" value=" スタート " style="margin-top:15px;" />&nbsp;
                <input type="button" v-on:click="stopButton_click" value=" 中止 " />
                <p class="message" v-text="elapse"></p>
            </form>
        </article>
        <footer>
            <p>&nbsp;</p>
            <p class="footer_text"><a href="#top">TOP</a></p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
        </footer>
        <script>
            // タイマー
            var timer, audio;
            const appTimer = new Vue({
                el: "#timerForm",
                data: {
                    hours: 0,
                    munites: 0,
                    seconds: 0,
                    elapse: 0
                },
                methods: {
                    startButton_click: () => {
                        let timeout = 60 * 60 * appTimer.hours + 60 * appTimer.munites + appTimer.seconds;
                        timer = setInterval(()=>{
                            timeout--;
                            appTimer.elapse = "残り：" + timeout + "秒";
                            if (timeout == 0) {
                                clearInterval(timer);
                                audio = new Audio();
                                audio.src = "/audio/1";
                                audio.play();
                                appTimer.elapse = "タイムアップしました。";
                            }
                        }, 1000);
                    },
                    stopButton_click: () => {
                        clearInterval(timer);
                        appTimer.elapse = "カウントを中止しました。";
                        audio.pause();
                    }
                }
            });

            // データの削除
            const appDelete = new Vue({
                el: "#deleteRecordForm",
                data: {
                    deleteTable: null,
                    deleteId: 0,
                    deleteRecordMessage: ""
                },
                methods: {
                    deleteRecord_Click: async () => {
                        if (!appDelete.deleteTable) {
                            alert("対象テーブルが指定されていません。");
                            return;
                        }
                        if (!(appDelete.deleteId && appDelete.deleteId > 0)) {
                            alert("対象 id が指定されていません。");
                            return;
                        }
                        if (confirm(appDelete.deleteTable + "の id " + appDelete.deleteId + " を削除します。")) {
                            let url = `/deleteId?tableName=${appDelete.deleteTable}&id=${appDelete.deleteId}`;
                            fetch(url)
                            .then(data=>data.text())
                            .catch(err=>appDelete.deleteRecordMessage = err.message)
                            .then(text=>appDelete.deleteRecordMessage = text)
                            .catch(err=>appDelete.deleteRecordMessage = err.message);

                            if (await deleteId(appDelete.deleteTable, appDelete.deleteId)) {
                                appDelete.deleteRecordMessage = "削除されました。";
                            }
                            else {
                                appDelete.deleteRecordMessage = "エラーを検出。";
                            }
                        }
                        else {
                            appDelete.deleteRecordMessage = "削除は取り消されました。";
                        }
                    }
                }
            });

            // データの一括登録とチェック
            const bulkDataForm = new Vue({
                el: "#bulkDataForm",
                data: {
                    folder: "",
                    bulkTable: "",
                    result: "",
                    message: ""
                },
                computed: {
                    folder1: () => { return bulkDataForm.folder.replace(/\\/g, "/");}
                },
                methods: {
                    checkButton_Click: () => {  // 一括チェック
                        fetch("/extra/bulkCheck?folder=" + bulkDataForm.folder1 + "&bulkTable=" + bulkDataForm.bulkTable)
                        .then(res=>res.json())
                        .then(arr => {
                            let html = "";
                            for (let a of arr) {
                                html += ("<li>" + a + "</li>")
                            }
                            if (html == "") {
                                bulkDataForm.message = "";
                                bulkDataForm.result = "";
                            }
                            else {
                                bulkDataForm.message = "未登録画像フォルダ";
                                bulkDataForm.result = html;
                            }
                        })
                        .catch(err=>{bulkDataForm.message = err.message;});
                    },
                    insertButton_Click: () => {  // 一括挿入
                        fetch("/extra/bulkInsert?folder=" + bulkDataForm.folder1 + "&bulkTable=" + bulkDataForm.bulkTable)
                        .then(res=>res.text())
                        .then(text=>{bulkDataForm.message = text;})
                        .catch(err=>{bulkDataForm.message = err.message;});
                    }
                }
            });

            // テーブルの path フィールドの存在チェック
            const checkPathForm = new Vue({
                el: "#checkPathForm",
                data: {
                    checkTable: "Pictures",
                    idFrom: "",
                    idTo: "",
                    message: "",
                    result:""
                },
                methods: {
                    checkTable_Click: () => {
                        if (checkPathForm.idFrom && checkPathForm.idTo) {
                            fetch(`/extra/checkPathTable?tablename=${checkPathForm.checkTable}&idFrom=${checkPathForm.idFrom}&idTo=${checkPathForm.idTo}`)
                            .then(response => response.json())
                            .then(json => checkPathForm.message = json)
                            .catch(err => checkPathForm.message = err.message);
                        }
                        else {
                            fetch(`/extra/checkPathTable?tablename=${checkPathForm.checkTable}`)
                            .then(response => response.json())
                            .then(arr => {
                                let html = "";
                                for (let a of arr) {
                                    html += "<li>";
                                    html += a;
                                    html += "</li>\n";
                                }
                                if (html == "") {
                                    checkPathForm.message = "存在しないパスは０件でした。";
                                    checkPathForm.result = html;
                                }
                                else {
                                    checkPathForm.message = "存在しないパス一覧";
                                    checkPathForm.result = html;
                                }
                            })
                            .catch(err => checkPathForm.message = err.message);
                        }
                    }
                }
            });
        </script>
    </body>
</html>
