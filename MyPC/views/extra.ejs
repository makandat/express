<!DOCTYPE html>
<html>
    <head>
        <title>その他</title>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="/css/style.css" />
        <script src="/js/vue.js"></script>
        <style>
            form {
                margin-left:5%;
            }
        </style>
    </head>

    <body>
        <header>
            <h1><a href="/"><img src="/img/home_blue.png" /></a>&nbsp;その他</h1>
            <hr style="color:deepskyblue;" />
            <!-- メニュー -->
            <div class="menu" style="padding:5px;">
                <a href="#データベース">データベース</a>&nbsp;/&nbsp;
                <a href="#クラウド">クラウド</a>&nbsp;/&nbsp;
                <a href="#BINDATA">サムネール管理テーブル (BINDATA)</a>&nbsp;/&nbsp;
                <a href="#テーブルのバックアップ">テーブルのバックアップ</a>&nbsp;/&nbsp;
                <a href="#レコード識別マーク一覧">レコード識別マーク一覧</a>&nbsp;/&nbsp;
                <a href="#テーブルのデータの削除">テーブルのデータの削除</a>&nbsp;/&nbsp;
                <a href="#テーブルのデータの一括削除">テーブルのデータの一括削除</a>&nbsp;/&nbsp;
                <a href="#テーブルのレコードのパス (path) の一括変更">テーブルのレコードのパス (path) の一括変更</a>&nbsp;/&nbsp;
                <a href="#データ一括登録とチェック">データ一括登録とチェック</a>&nbsp;/&nbsp;
                <a href="#パスの存在チェック">パスの存在チェック</a>&nbsp;/&nbsp;
                <a href="#ファイルリストからの一括データ登録">ファイルリストからの一括データ登録</a>&nbsp;/&nbsp;
                <a href="#タイトルの一括変更">タイトルの一括変更</a>&nbsp;/&nbsp;
                <a href="#タイマー">タイマー</a>&nbsp;/&nbsp;
                <a href="#/img フォルダ">/img フォルダ</a>
            </div>
        </header>
        <article>
            <!-- データベース -->
            <h2><a id="データベース">データベース</a></h2>
            <ul>
                <li><a href="/extra/mysqlExecCommand" target="_blank">SQL 文の実行</a></li>
                <li><a href="/extra/mysqlExecFile" target="_blank">SQL ファイルの実行</a></li>
                <li><a href="/extra/mysqlMetaInfo" target="_blank">MySQL メタ情報 (INFORMATION_SCHEMA)</a></li>
            </ul>
            <p>&nbsp;</p>

            <!-- クラウド -->
            <h2><a id="クラウド">クラウド</a></h2>
            <ul>
                <li><a href="/extra/googleDrive" target="_blank">Google Drive</a></li>
                <li><a href="/extra/awsS3" target="_blank">AWS S3</a></li>
            </ul>
            <p>&nbsp;</p>

            <!-- サムネール管理テーブル (BINDATA) -->
            <h2><a id="BINDATA">サムネール管理テーブル (BINDATA)</a></h2>
            <ul>
                <li><a href="/extra/bindatalist" target="_blank">内容一覧表示</a></li>
                <li><a href="/extra/bindataForm" target="_blank">サムネール画像の追加と修正</a></li>
                <li><a href="/extra/bindataQuery" target="_blank">サムネール画像の逆引き</a></li>
            </ul>
            <br />
            <!-- テーブルのバックアップ -->
            <h2><a id="テーブルのバックアップ">テーブルのバックアップ</a></h2>
            <ul>
                <li><a href="/extra/newBackup" target="_blank">バックアップテーブルを作る</a></li>
                <li><a href="/extra/removeBackup" target="_blank">古いバックアップテーブルを削除する</a></li>
                <li><a href="/extra/exportImportTable" target="_blank">テーブルのエクスポートとインポート</a></li>
            </ul>
            <br />
            <!-- レコード識別マーク一覧 -->
            <h2><a id="レコード識別マーク一覧">レコード識別マーク一覧</a></h2>
            <ul>
                <li><a href="/extra/marksTable" target="_blank">識別マーク一覧 (marks テーブル)</a></li>
            </ul>
            <br />
            <!-- テーブルのデータの削除 (deleteRecordForm) -->
            <h2><a id="テーブルのデータの削除">テーブルのデータの削除</a></h2>
            <form id="deleteRecordForm">
                <p class="comment" style="text-align:left;">(注意) 削除後のデータは復活できません。</p>
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div class="form_item" style="color:black">
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="Album" /> Album</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="Projects" /> Projects</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="Documents" /> Documents</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="Music" /> Music</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="BINDATA" /> BINDATA</label>&nbsp;
                        <label><input type="radio" v-model="deleteTable" name="deleteTable" value="Playlists" /> Playlists</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">削除する id</div>
                    <div class="form_item">
                        <input type="number" v-model="deleteId" size="10" />&nbsp;
                        <input type="button" value=" 削除する " v-on:click="deleteRecord_Click" style="color:red;" />
                    </div>
                </div>
                <br />
                <p class="message" v-text="deleteRecordMessage"></p>
            </form>
            <br />
            <!-- テーブルのデータの一括削除　-->
            <h2><a id="テーブルのデータの一括削除">テーブルのデータの一括削除</a></h2>
            <form id="deleteBatchForm">
                <p class="comment" style="text-align:left;">(注意) 削除後のデータは復活できません。</p>
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div class="form_item" style="color:black">
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="Album" /> Album</label>&nbsp;
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="Projects" /> Projects</label>&nbsp;
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="Documents" /> Documents</label>&nbsp;
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="Music" /> Music</label>&nbsp;
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="BINDATA" /> BINDATA</label>&nbsp;
                        <label><input type="radio" v-model="dropTable" name="dropTable" value="Playlists" /> Playlists</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">削除する id の範囲</div>
                    <div class="form_item"><input type="text" v-model="idFrom" size="6" /> から <input type="text" v-model="idTo" size="6" /> まで</div>
                </div>
                <div class="form_row">
                    <div class="form_item" style="margin-top:14px;"></div>
                    <div class="form_item">
                        <input type="button" v-on:click="confirmButton_Click" value=" 確認する "  v-show="!modeDelete" />
                        <input type="button" v-on:click="deleteButton_Click" value=" 削除する " v-show="modeDelete" style="color:red;" />
                        <input type="button" v-on:click="cancelButton_Click" value=" キャンセル " />
                    </div>
                </div>
                <br />
                <div class="message" v-text="message"></div>
            </form>
            <br />
            <!-- テーブルのレコードのパス (path) の一括変更　-->
            <h2><a id="テーブルのレコードのパス (path) の一括変更">テーブルのレコードのパス (path) の一括変更</a></h2>
            <form id="replaceBatchForm">
                <p class="comment" style="text-align:left;">(注意) 変更後のデータは復活できません。</p>
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div class="form_item" style="color:black">
                        <label><input type="radio" v-model="replaceTable" name="replaceTable" value="Projects" /> Projects</label>&nbsp;
                        <label><input type="radio" v-model="replaceTable" name="replaceTable" value="Documents" /> Documents</label>&nbsp;
                        <label><input type="radio" v-model="replaceTable" name="replaceTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="replaceTable" name="replaceTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="replaceTable" name="replaceTable" value="Music" /> Music</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">置換前の path の部分文字列</div>
                    <div class="form_item"><input type="text" v-model="before" size="50" /></div>
                </div>
                <div class="form_row">
                    <div class="form_item">置換後の path の部分文字列</div>
                    <div class="form_item"><input type="text" v-model="after" size="50" /></div>
                </div>
                <div class="form_row">
                    <div class="form_item" style="margin-top:14px;"></div>
                    <div class="form_item">
                        <input type="button" v-on:click="confirmButton" value=" 確認する " v-show="!replaceVisible" />
                        <input type="button" v-on:click="replaceButton" value=" 変更する " v-show="replaceVisible" />
                        <input type="button" v-on:click="cancelButton" value=" キャンセル " />
                    </div>
                </div>
                <br />
                <div class="message" v-text="message"></div>
            </form>
            <!-- データ一括登録とチェック (bulkDataForm) -->
            <h2><a id="データ一括登録とチェック">データ一括登録とチェック</a></h2>
            <p class="comment">Pictures の場合、ディレクトリは「親/子/孫」の関係で「親」を指定します。そして、画像ファイルは「孫」の中にあるものとします。</p>
            <form id="bulkDataForm">
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div class="form_item" style="color:black">
                        <label><input type="radio" v-model="bulkTable" name="bulkTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="bulkTable" name="bulkTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="bulkTable" name="bulkTable" value="Music" /> Music</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">対象フォルダ</div>
                    <div class="form_item"><input type="text" v-model="folder" size="100" /></div>
                </div>
                <div class="form_row">
                    <div class="form_item">メディア (登録時のみ)</div>
                    <div class="form_item"><input type="text" v-model="media" size="20" /></div>
                </div>
                <div class="form_row">
                    <div class="form_item">マーク (登録時のみ)</div>
                    <div class="form_item"><input type="text" v-model="mark" size="20" /></div>
                </div>
                <div class="form_row" style="margin-top:12px;">
                    <input type="button" v-on:click="checkButton_Click" value=" 一括チェック " />&nbsp;
                    <input type="button" v-on:click="insertButton_Click" value=" 一括登録 " style="color:red" />
                </div>
                <br />
                <p class="message" v-text="message"></p>
                <ul style="font-size:10pt;" v-html="result"></ul>
            </form>
            <br />
            <!-- パスの存在チェック (checkPathForm) -->
            <h2><a id="パスの存在チェック">パスの存在チェック</a></h2>
            <form id="checkPathForm" name="checkPathForm">
                <div class="form_row">
                    <div class="form_item">テーブルの選択</div>
                    <div class="form_item" style="color:black">
                        <label><input type="radio" v-model="checkTable" name="checkTable" value="Pictures" /> Pictures</label>&nbsp;
                        <label><input type="radio" v-model="checkTable" name="checkTable" value="Videos" /> Videos</label>&nbsp;
                        <label><input type="radio" v-model="checkTable" name="checkTable" value="Music" /> Music</label>&nbsp;
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">
                        チェックする id の範囲 (省略時はすべて)
                    </div>
                    <div class="form_item">
                        <input type="text" name="fromId" v-model="fromId" size="6" /> から <input type="text" name="toId" v-model="toId" size="6" /> まで
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">
                        <input type="button" v-on:click="checkTable_Click" value=" チェックする " />
                    </div>
                </div>
                <br />
                <p class="message" v-text="message"></p>
                <ul style="font-size:10pt;" v-html="result"></ul>
            </form>
            <br />
            <!-- ファイルリストからの一括データ登録 (insertFileList) -->
            <h2><a id="ファイルリストからの一括データ登録">ファイルリストからの一括データ登録</a></h2>
            <form id="insertFileList" name="formInsertFileList">
                <div class="form_row">
                    <div class="form_item">登録先のテーブル</div>
                    <div class="form_item">
                        <label><input type="radio" v-model="tableName" name="tableName" value="Pictures" size="10" /> Pictures </label>
                        <label><input type="radio" v-model="tableName" name="tableName" value="Videos" size="10" /> Videos </label>
                        <label><input type="radio" v-model="tableName" name="tableName" value="Music" size="10" /> Music</label>
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">ファイルリスト <button type="button" v-on:click="pasteButton_Click">クリックされたパスリストを貼り付け</button> (「コンピュータ」のパスをクリックしてリストを作れます。)</div>
                    <div class="form_item"><textarea name="fileList" v-model="fileList" cols="150" rows="12"></textarea></div>
                </div>
                <div class="form_row" style="margin-bottom:10px;">
                    <div class="form_item">マーク</div>
                    <div class="form_item"><input type="text" v-model="mark" name="mark" size="20" /></div>
                </div>
                <div class="form_row" style="margin-bottom:10px;">
                    <div class="form_item"></div>
                    <div class="form_item"><input type="button" v-on:click="submitFileList_Click" value=" 送信する " /></div>
                </div>
                <div class="form_row">
                    <p class="message" v-text="message"></p>
                </div>
            </form>
            <br />
            <!-- タイトルの一括変更 -->
            <h2><a id="タイトルの一括変更">タイトルの一括変更</a></h2>
            <form id="changeTitles">
                <div class="form_row">
                    <div class="form_item">登録先のテーブル</div>
                    <div class="form_item">
                        <label><input type="radio" v-model="tableName" name="tableName" value="Pictures" size="10" checked /> Pictures </label>
                        <label><input type="radio" v-model="tableName" name="tableName" value="Videos" size="10" /> Videos </label>
                        <label><input type="radio" v-model="tableName" name="tableName" value="Music" size="10" /> Music</label>
                    </div>
                </div>
                <div class="form_row">
                    <div class="form_item">置き換え前の文字列</div>
                    <div class="form_item"><input type="text" v-model="before" size="40" value="" /></div>
                </div>
                <div class="form_row">
                    <div class="form_item">置き換え後の文字列</div>
                    <div class="form_item"><input type="text" v-model="after" size="40" value="" /></div>
                </div>
                <div class="form_row">
                    <div class="form_item">id の範囲</div>
                    <div class="form_item"><input type="number" v-model="fromId" size="10" /> から <input type="number" v-model="toId" size="10" /> まで</div>
                </div>
                <div class="form_row" style="margin-top:16px;">
                    <input type="button" v-on:click="changeTitleClick" value=" 変更する " style="color:red;" />
                </div>
                <br />
                <p class="message" v-text="message"></p>
            </form>
            <br />
            <!--  タイマー (timerForm) -->
            <h2><a id="タイマー">タイマー</a></h2>
            <form id="timerForm">
                <input type="number" size="8" v-model="hours"> 時間&nbsp;&nbsp;
                <input type="number" size="8" v-model="munites"> 分
                <input type="number" size="8" v-model="seconds"> 秒<br />
                <input type="button" v-on:click="startButton_click" value=" スタート " style="margin-top:15px;" />&nbsp;
                <input type="button" v-on:click="stopButton_click" value=" 中止 " />
                <p class="message" v-text="elapse"></p>
            </form>
            <!-- /img フォルダ内容の表示 -->
            <h2><a id="/img フォルダ">/img フォルダ</a></h2>
            <p style="margin-left:5%;"><a href="/viewimgfolder" target="_blank">/img フォルダを表示する。</a></p>
            <br />
        </article>
        <footer>
            <p>&nbsp;</p>
            <p class="footer_text"><a href="#top">TOP</a></p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
        </footer>
        <script>
            // タイマー
            var timer, audio;
            const appTimer = new Vue({
                el: "#timerForm",
                data: {
                    hours: 0,
                    munites: 0,
                    seconds: 0,
                    elapse: 0
                },
                methods: {
                    startButton_click: () => {
                        let timeout = 60 * 60 * appTimer.hours + 60 * appTimer.munites + appTimer.seconds;
                        timer = setInterval(()=>{
                            timeout--;
                            appTimer.elapse = "残り：" + timeout + "秒";
                            if (timeout == 0) {
                                clearInterval(timer);
                                audio = new Audio();
                                audio.src = "/audio/1";
                                audio.play();
                                appTimer.elapse = "タイムアップしました。";
                            }
                        }, 1000);
                    },
                    stopButton_click: () => {
                        clearInterval(timer);
                        appTimer.elapse = "カウントを中止しました。";
                        audio.pause();
                    }
                }
            });

            // データの削除
            const appDelete = new Vue({
                el: "#deleteRecordForm",
                data: {
                    deleteTable: null,
                    deleteId: 0,
                    deleteRecordMessage: ""
                },
                methods: {
                    deleteRecord_Click: async () => {
                        if (!appDelete.deleteTable) {
                            alert("対象テーブルが指定されていません。");
                            return;
                        }
                        if (!appDelete.deleteId) {
                            alert("対象 id またはパスが指定されていません。");
                            return;
                        }
                        let sql = `/extra/getTitle?table=${appDelete.deleteTable}&id=${appDelete.deleteId}`;
                        fetch(sql)
                        .then(res => res.json())
                        .then(json => {
                            let msg = `${appDelete.deleteTable} から id=${appDelete.deleteId}, タイトル"${json.title}" (${json.path}) を削除します。`;
                            if (confirm(msg)) {
                                let url = `/deleteId?tableName=${appDelete.deleteTable}&id=${appDelete.deleteId}`;
                                fetch(url)
                                .then(resp => resp.text())
                                .then(text=>appDelete.deleteRecordMessage = text)
                                .catch(err=>appDelete.deleteRecordMessage = err.message);
                            }
                            else {
                                appDelete.deleteRecordMessage = "削除は取り消されました。";
                            }
                        })
                        .catch(err => appDelete.deleteRecordMessage = "エラーを検出。");
                    }
                }
            });

            // データの一括登録とチェック
            const bulkDataForm = new Vue({
                el: "#bulkDataForm",
                data: {
                    folder: "",
                    bulkTable: "",
                    media: "",
                    mark: "",
                    result: "",
                    message: ""
                },
                computed: {
                    folder1: () => { return bulkDataForm.folder.replace(/\\/g, "/");}
                },
                methods: {
                    checkButton_Click: () => {  // 一括チェック
                        fetch("/extra/bulkCheck?folder=" + bulkDataForm.folder1 + "&bulkTable=" + bulkDataForm.bulkTable)
                        .then(res=>res.json())
                        .then(arr => {
                            let html = "";
                            if (arr.length == 0) {
                                bulkDataForm.message = "";
                                html = "<li style='font-size:14pt;color:magenta;'>未登録項目はありません。(" + bulkDataForm.folder1 + ")</li>";
                                bulkDataForm.result = html;
                            }
                            else {
                                for (let a of arr) {
                                html += ("<li>" + a + "</li>")
                                }
                                if (html == "") {
                                    bulkDataForm.message = "";
                                    bulkDataForm.result = "";
                                }
                                else {
                                    bulkDataForm.message = "未登録画像フォルダ / 動画・音楽ファイル";
                                    bulkDataForm.result = html;
                                }
                            }
                        })
                        .catch(err=>{bulkDataForm.message = err.message;});
                    },
                    insertButton_Click: () => {  // 一括挿入
                        let msg = `${bulkDataForm.bulkTable} に ${bulkDataForm.folder1} の情報を登録します。`;
                        if (confirm(msg)) {
                            let data = {
                                folder: bulkDataForm.folder,
                                tableName: bulkDataForm.bulkTable,
                                media: bulkDataForm.media,
                                mark: bulkDataForm.mark
                            };
                            fetch("/extra/bulkInsert", {method:"POST", headers:{'Content-Type': 'application/json'}, body:JSON.stringify(data)})
                            .then(res=>res.text())
                            .then(text=>{bulkDataForm.message = text; bulkDataForm.result = "";})
                            .catch(err=>{bulkDataForm.message = err.message; bulkDataForm.result = "";});
                        }
                        else {
                            bulkDataForm.message = "取り消されました。";
                        }
                    }
                }
            });

            // テーブルの path フィールドの存在チェック
            const checkPathForm = new Vue({
                el: "#checkPathForm",
                data: {
                    checkTable: "Pictures",
                    idFrom: "",
                    idTo: "",
                    message: "",
                    result:""
                },
                methods: {
                    checkTable_Click: () => {
                        if (checkPathForm.idFrom && checkPathForm.idTo) {
                            fetch(`/extra/checkPathTable?tablename=${checkPathForm.checkTable}&idFrom=${checkPathForm.idFrom}&idTo=${checkPathForm.idTo}`)
                            .then(response => response.json())
                            .then(json => checkPathForm.message = json)
                            .catch(err => checkPathForm.message = err.message);
                        }
                        else {
                            fetch(`/extra/checkPathTable?tablename=${checkPathForm.checkTable}`)
                            .then(response => response.json())
                            .then(arr => {
                                let html = "";
                                for (let a of arr) {
                                    html += "<li>";
                                    html += a;
                                    html += "</li>\n";
                                }
                                if (html == "") {
                                    checkPathForm.message = "存在しないパスは０件でした。";
                                    checkPathForm.result = html;
                                }
                                else {
                                    checkPathForm.message = "存在しないパス一覧";
                                    checkPathForm.result = html;
                                }
                            })
                            .catch(err => checkPathForm.message = err.message);
                        }
                    }
                }
            });

            // ファイルリストからの一括登録
            const insertFileList = new Vue({
                el: "#insertFileList",
                data: {
                    tableName: "Pictures",
                    fileList: "",
                    mark: "",
                    message: ""
                },
                methods : {
                    submitFileList_Click: () => {
                        insertFileList.message = "";
                        let data = {"tableName":insertFileList.tableName, "mark":insertFileList.mark, "fileList":insertFileList.fileList};
                        fetch("/extra/insertFileList", {method:"POST", headers:{'Content-Type': 'application/json'}, body:JSON.stringify(data)})
                        .then(res => res.json())
                        .then(data => {
                            insertFileList.message = "データ登録が完了しました。" + data;
                        })
                        .catch(err => insertFileList.message = err.message);
                    },
                    pasteButton_Click: () => {
                        insertFileList.fileList = localStorage.getItem("clickedPathList");
                        localStorage.setItem("clickedPathList", "");
                    }
                }
            });

            // テーブルのデータの一括削除
            const deleteBatchForm = new Vue({
                el: "#deleteBatchForm",
                data: {
                    dropTable: null,
                    idFrom: 0,
                    idTo: 0,
                    message: "",
                    modeDelete: false
                },
                methods: {
                    confirmButton_Click: async () => {
                        if (parseInt(deleteBatchForm.idTo) <= parseInt(deleteBatchForm.idFrom)) {
                            alert("id の範囲が不正です。");
                            return;
                        }
                        if (!deleteBatchForm.dropTable) {
                            alert("テーブルの指定がありません。");
                            return;
                        }
                        let resp = (await fetch(`/extra/deleteBatch?confirm=1&table=${deleteBatchForm.dropTable}&idFrom=${deleteBatchForm.idFrom}&idTo=${deleteBatchForm.idTo}`)).text();
                        await resp.then(text => deleteBatchForm.message = text);
                        deleteBatchForm.modeDelete = true;
                    },
                    deleteButton_Click: async () => {
                        if (parseInt(deleteBatchForm.idTo) < parseInt(deleteBatchForm.idFrom)) {
                            alert("id の範囲が不正です。");
                            return;
                        }
                        let url = `/extra/deleteBatch?table=${deleteBatchForm.dropTable}&idFrom=${deleteBatchForm.idFrom}&idTo=${deleteBatchForm.idTo}`;
                        let resp = (await fetch(url)).text();
                        resp.then(text => deleteBatchForm.message = text);
                        deleteBatchForm.modeDelete = false;
                    },
                    cancelButton_Click: () => {
                        deleteBatchForm.idFrom = "";
                        deleteBatchForm.idTo = "";
                        deleteBatchForm.message = "";
                    }
                },
            });

            // テーブルのレコードのパス (path) の一括変更
            const replaceBatchForm = new Vue({
                el: "#replaceBatchForm",
                data: {
                    replaceTable: null,
                    before: "",
                    after: "",
                    message: "",
                    replaceVisible: false
                },
                methods: {
                    confirmButton: async () => {
                        let url = `/extra/replacePathBatch?confirm=1&table=${replaceBatchForm.replaceTable}&before=${replaceBatchForm.before}&after=${replaceBatchForm.after}`;
                        let resp = (await fetch(url)).text();
                        resp.then(text => {
                            replaceBatchForm.message = text;
                            replaceBatchForm.replaceVisible = true;
                        });
                        
                    },
                    replaceButton: async () => {
                        let url = `/extra/replacePathBatch?table=${replaceBatchForm.replaceTable}&before=${replaceBatchForm.before}&after=${replaceBatchForm.after}`;
                        let resp = (await fetch(url)).text();
                        resp.then(text => {
                            replaceBatchForm.message = text
                            replaceBatchForm.replaceVisible = false;
                        });
                    },
                    cancelButton: async () => {
                        replaceBatchForm.replaceTable = null;
                        replaceBatchForm.before = "";
                        replaceBatchForm.after = "";
                        replaceBatchForm.message = "";
                        replaceBatchForm.replaceBatchForm = false;
                    }
                }
            });

            // タイトルの一括変更
            const changeTitles = new Vue({
                el: "#changeTitles",
                data: {
                    tableName: "Pictures",
                    fromId: 0,
                    toId: 0,
                    before: "",
                    after: "",
                    message: ""
                },
                methods: {
                    changeTitleClick: () => {
                        let fromid = parseInt(changeTitles.fromId);
                        let toid = parseInt(changeTitles.toId);
                        if (fromid + toid == 0) {
                            alert("id の範囲が空欄です。");
                            return;
                        }
                        if (fromid > toid) {
                            alert("id の範囲が正しくありません。");
                            return;
                        }
                        if (changeTitles.before == "") {
                            alert("変換前の文字列が空欄です。");
                            return;
                        }
                        let msg = `${changeTitles.tableName} の id ${fromid} から ${toid} のタイトルの "${changeTitles.before}" を "${changeTitles.after}" に置換します。`;
                        if (confirm(msg)) {
                            let data = {
                                tableName: changeTitles.tableName,
                                fromid: changeTitles.fromId,
                                toid: changeTitles.toId,
                                before: changeTitles.before,
                                after: changeTitles.after
                            };
                            fetch('/extra/replaceTitles', {method:"POST", headers:{'Content-Type': 'application/json'}, body:JSON.stringify(data)})
                            .then(res => res.text())
                            .then(text => changeTitles.message = text)
                            .catch(err => changeTitles.message = err.message);
                        }
                        else {
                            changeTitles.message = "取り消されました。";
                        }
                    }
                }
            });
        </script>
    </body>
</html>
